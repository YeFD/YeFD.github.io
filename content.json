{"meta":{"title":"鸡舍","subtitle":"叽叽叽叽叽","description":"叽叽叽叽叽叽","author":"xiaoji","url":"https://blog.xiaoji.icu","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-03-16T07:42:11.850Z","updated":"2022-03-16T07:42:11.850Z","comments":false,"path":"/404.html","permalink":"https://blog.xiaoji.icu/404.html","excerpt":"","text":""},{"title":"分类","date":"2022-03-16T07:43:00.049Z","updated":"2022-03-16T07:43:00.049Z","comments":false,"path":"categories/index.html","permalink":"https://blog.xiaoji.icu/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-03-16T07:42:50.749Z","updated":"2022-03-16T07:42:50.749Z","comments":false,"path":"about/index.html","permalink":"https://blog.xiaoji.icu/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"友情链接","date":"2022-03-16T07:43:08.627Z","updated":"2022-03-16T07:43:08.627Z","comments":true,"path":"links/index.html","permalink":"https://blog.xiaoji.icu/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-03-16T07:43:19.463Z","updated":"2022-03-16T07:43:19.463Z","comments":false,"path":"repository/index.html","permalink":"https://blog.xiaoji.icu/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-03-16T07:43:33.896Z","updated":"2022-03-16T07:43:33.896Z","comments":false,"path":"tags/index.html","permalink":"https://blog.xiaoji.icu/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C++程序设计","slug":"C-Plus-Plus","date":"2022-03-16T08:35:00.000Z","updated":"2022-03-16T09:12:15.610Z","comments":true,"path":"2022/03/16/C-Plus-Plus/","link":"","permalink":"https://blog.xiaoji.icu/2022/03/16/C-Plus-Plus/","excerpt":"","text":"C++程序设计 一、 考试形式与试卷结构 考试时间：60分 总分：50分 考试方式：笔试，闭卷 考试题型与分数比例：编程题（100%） 二、 考试内容要求 1. 基本数据类型与输入输出 掌握各种基本数据类型的定义与操作；掌握cin和cout的用法,了解printf和scanf的用法。 1.1 字符集与保留字 C++字符集包括大小写英文字母、数字字符、特殊字符。 1.2 基本数据类型 整型int, 4 Byte 字符型char, 1 Byte 浮点型float, 4 Byte; double, 8 Byte 布尔型bool 1.3 变量与常量的定义 变量：在程序运行期间可以改变的量 常量：不能改变的量 常变量const：不能改比值的变量（只读变量） 1.4 cin, cout, printf, scanf的用法 cin cout输入输出流 2. 表达式和过程化语句 掌握表达式和语句的概念；掌握各种运算符的使用；掌握各种过程化控制语句结构。 2.1 表达式 2.2 算术运算、赋值和类型转换 2.3 关系与逻辑运算 2.4 if语句 根据不同的条件执行不同的语句。 2.5 条件运算符、逗号表达式 2.6 while, do while, for循环语句 while语句只要条件为真，就重复执行。 do while总能保证语句执行一次。 for表达式1初始化，表达式2用于控制循环，表达式3每次循环结束后执行。 2.7 switch、break、continue语句 switch语句用于测试一个变量具有多个值时所执行的动作。 break语句用于强制退出循环语句。 continue语句用于终止最内层的本次循环。 3. 函数 掌握函数声明与定义；掌握全局变量、静态变量、局部变量；掌握递归、重载函数。 一个函数就是一个功能 3.1 函数原型、函数的调用，按值调用，引用调用，函数与变量的作用域 函数原型：不写形参名的函数声明。用于在程序编译阶段对调用函数的合法性进行全面检查 传值调用：实参使用常量、变量值或表达式值，形参使用变量值。实现机制是系统将实参备份一个副本给形参，形参的改变不影响实参。 传址调用：实参使用地址值，形参使用指针。实现机制是让形参指针直接指向实参，可以通过改变形参指针指向的实参来改变实参。 引用调用：实参使用变量名，形参使用引用。实现机制是让形参作为实参的别名，通过引用来改变实参的变量值。 3.2 全局变量、局部变量和静态局部变量 全局变量：指作用域在程序级和文件级的变量，包括外部变量和外部静态变量。 局部变量：指作用域在函数级和块级的变量，包含auto、register、static。 内部静态变量static，以固定地址存放这个变量，只要程序继续执行操作，这个变量不会消失。 自动变量auto，默认可省 3.3 递归函数、内联函数、重载函数 递归函数：在函数中直接或间接调用该函数本身的函数 内联函数inline：将函数代码直接嵌入到主调用函数中 函数重载：对一个函数名重新赋予新的含义，一名多用 4. 数组 掌握数组的定义与使用；掌握数组做函数参数的用法；掌握数组各种排序和查找算法。 4.1 数组定义和初始化数组 数组：有序数据的集合 4.2 数组做函数参数 数组名：传递的是数组的起始地址，改变形参会改变实参 4.3 二维数组 4.4 字符数组与字符串，字符串函数 5. 指针 掌握指针和地址的概念；掌握指针的定义与初始化，指针做函数参数；掌握指针、数组和字符串的关系。 5.1 指针概念、运算，new, delete运算符 指针变量：存储内存地址的变量。指针=地址 *指针运算符 &amp;取址运算符 指针指向的空间可以通过new来分配，delete释放。 5.2 指针与函数 指针作为函数参数：将一个变量的地址传送给被调用函数的形参。 函数指针：函数的入口地址 5.3 字符指针 5.4 指针数组，数组指针 指针数组：元素均为指针类型数据的数组 数组指针：数组的首地址 指向常量的指针变量：不允许通过指针修改 const int *p = &amp;A; 常指针：指针的指向不能改变int * const p = &amp;A; 6. 引用 掌握引用的语法，引用传递函数的方法；熟悉函数原型中声明引用的目的，正确使用引用。 6.1 引用的概念和操作 引用是变量的一个别名，对引用的改动实际上就是对目标的改动。 指针指向一块内存的首地址，是变量，可以不初始化，占用空间 引用是某块内存地址的别名，不是变量，必须初始化，不占用空间 6.2 用引用传递函数参数和返回值 使用引用可以从调用的函数返回多个值。 6.3 函数调用作为左值 左值：可以取地址，有名字 右值：不可以取地址，无名字 7. 结构体和共同体 了解结构体和共同体的定义与使用。 结构体：包含若干个类型的数据项的组合项 8. 类与对象 掌握类的声明；掌握成员函数的定义和使用。 8.1 类的定义、成员变量与成员函数的定义与调用； 类：类是创建对象的样板，它包含着对象的状态描述和方法的定义。类是对象的抽象及描述。 类中的所有成员函数只生成一个副本。 8.2 结构体与类的区别 8.3 掌握构造函数与析构函数 构造函数的功能是在创建对象时使用给定的值讲对象初始化。 构造函数是成员函数，函数体可以放在类体内，也可以放在类体外。 构造函数的名称与类名相同，不指定类型说明，可以无参数，也可以有一个或多个参数。 可以重载，可定义多个不同参数的构造函数。 拷贝构造函数，作用是用一个已知的对象来初始化一个被创建的同类的对象。参数引用调用。 深复制：不会共享资源（内存空间），一个对象的销毁不会影响另一个。 析构函数用于释放一个对象。 析构函数不能有参数，也不能重载。 析构函数名称为～类名 8.4 掌握对象的定义、引用、对象数组、对象指针、对象的动态建立与释放 对象：对象是类的实例。从实现形式上讲，对象是一个状态和操作的封装体。对象实现了信息隐藏，对象与外部是通过操作接口联系的，操作接口提供了对象的功能。 对象定义：类名 对象名; 对象指针：类名 *对象指针名; 对象数组：数组元素为对象的数组，类名 数组名[大小]; this指针：隐含的指向当前被调用对象的指针。 8.5 掌握静态成员、友元 静态数据成员是类所有对象共享的成员，也称为类成员。使用静态成员可以节省内存。static 数据类型 名;。在类外进行初始化。 静态成员函数，通过对象或通过类调用，没有this指针，不能访问类中非静态成员。 友元：友元关系不能被继承，是单向的，不具有传递性。作用在于提高程序的运行效率，但是破坏了类的封装性和隐藏性。 友元函数是可以访问类的私有成员的非成员函数。 友元类的所有成员函数都是另一个类的友元函数。 8.6 掌握类和对象的应用 8.7 了解类的封装性和信息隐蔽 封装：将某个事物包起来，使外界不知道事物的具体内容，无法直接访问或修改数据和代码。优点 重用 不必关心具体的实现 具有安全性 缺点：其它类无法拓展功能。使用继承解决。 9. 运算符重载 掌握运算符重载的概念、规则和使用方法；掌握常用的单目和双目运算符重载；掌握流插入和提取运算符重载。 运算符重载就是赋予已有的运算符多重含义，使它能够作用于特定类的对象，从而执行特定的功能。可以使程序更加简洁，使表达式更加直观，增加可读性。 限制，四个不能改变 操作数个数 原有的优先级 原有的结合性 原有的语法结构 运算符重载一般采用： 成员函数形式：有隐含参数，双目仅一个参数 友元函数形式：无隐含参数，双目为两个参数 10. 继承 掌握继承机制建立新类的方法；了解继承如何提高软件的可复用性。 10.1 继承的概念和工作方式 继承指一个新类从已有类中获得其已有特性；扩充了类的定义，新类共享已有类的行为，还具有修改或额外添加的行为，可以说继承的本质特征是行为共享。 10.2 掌握派生类的声明与构成 10.3 掌握派生类成员的成员访问属性 三种继承方式： 公有继承：public、protected不变，private不可访问 保护继承：public变protected、protected不变，private不可访问 私有继承：public、protected变private，private不可访问 10.4 掌握派生类的构造函数和析构函数 派生类构造函数调用顺序 基类 子对象类 派生类（自己） 析构函数相反 10.5 了解基类与派生类的关系 虚基类：不同路径继承的该类成员在内存中只有一个备份，解决了多重继承中同名成员的唯一标识问题。 虚基类的构造函数在非虚基类之前调用。 10.6 了解继承与组合的区别 11. 多态性 掌握多态性与虚函数的概念；了解纯虚函数和抽象类。 联编：指一个程序自身彼此关联的过程。按照联编进行的阶段不同分为 静态联编：在编译连接阶段，程序开始运行前完成 动态联编：在程序运行时进行，C++的动态联编是在虚函数的支持下实现的。 联编属于多态性，是在不同阶段对不同实现进行的不同选择。 多态：一个名称可以有多种含义。不同对象对同一消息做出不同的响应 静态多态：函数重载，静态联编实现 动态多态：同一类层次的不同类中的重载函数具有相同的参数表，要根据指针指向对象所在类区别语义。动态联编实现 虚函数：非static的成员函数，之后继承层次结构都是虚函数。 意味着该函数在派生类中可能有不同的定义。 动态联编只能通过指针或引用标识对象来操作虚函数，否则为静态联编。 纯虚函数：在基类中不能对虚函数给出定义，留给派生类去定义。virtual int fun() =0; 抽象类：带有纯虚函数的类。为其它类提供合适的基类。 抽象类只能用作其它类的基类，不能建立对象 抽象类不能作为参数、函数返回、转换类型 指向抽象类的指针可以指向派生类，进而实现多态性（同一信号不同行为） 虚析构函数：派生类中的析构函数也是虚析构函数，目的在于使用delete删除对象时，能保证析构函数被正确地执行。 12. 流 掌握标准输入、输出流；掌握文件流的读写操作；了解流的概念。 流：缓冲区的数据 13. 命名空间和标准模板库 了解C++命名空间的概念与引用；了解标准模板库STL。 命名空间：一个由程序设计者命名的内存区域，内含全局实体，用来处理同名冲突。 标准命名空间std：定义了标准C++中所有标识符 面向对象的特点 抽象 封装：方便调用已经写好的函数，信息隐蔽 继承：方便对已有函数的功能进行直接调用和拓展 多态：实现对继承对象的统一调度 C++运行 程序：一组计算机CPU能够识别和执行的指令。 源程序：用高级语言编写的程序.cpp 目标程序：编译器将源程序翻译成二进制形式.obj 可执行程序：连接程序将目标程序与库文件等连接起来形成的可执行的二进制文件.exe","categories":[{"name":"学习","slug":"学习","permalink":"https://blog.xiaoji.icu/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"计算机考研","slug":"学习/计算机考研","permalink":"https://blog.xiaoji.icu/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94/"},{"name":"复试","slug":"学习/计算机考研/复试","permalink":"https://blog.xiaoji.icu/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94/%E5%A4%8D%E8%AF%95/"}],"tags":[{"name":"计算机考研复试","slug":"计算机考研复试","permalink":"https://blog.xiaoji.icu/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"},{"name":"C++","slug":"C","permalink":"https://blog.xiaoji.icu/tags/C/"}]},{"title":"离散数学","slug":"Discrete-Mathematics","date":"2022-03-16T08:29:12.000Z","updated":"2022-03-16T08:50:12.000Z","comments":true,"path":"2022/03/16/Discrete-Mathematics/","link":"","permalink":"https://blog.xiaoji.icu/2022/03/16/Discrete-Mathematics/","excerpt":"","text":"离散数学 Discrete Mathematics 第一章 命题逻辑的基本概念 命题：能判断真值的命题 真值：真、假，{0, 1} 真/假命题：真值为真/假的命题 简单命题（原子命题）：不能被分解为更简单的命题 复合命题：由简单命题通过逻辑联结词联结而成的命题 判断给定句子是否为命题，应分为两步： 判断是否为陈述句 判断是否有唯一的真值 联结词 否定¬\\neg¬ 合取∧\\wedge∧ 析取∨\\vee∨ 蕴含→\\rightarrow→ 等价↔\\leftrightarrow↔ 命题公式及其赋值 命题常项（命题常元）：真值确定的命题 命题变项（命题变元）：真值变化的变元 合式公式（公式）：将命题变量用联结词联结起来的符号串 子公式：公式的一部分 赋值（解释）：指定真值的命题 成真/假赋值 重言式（永真式）：各种赋值情况下均为真 矛盾式（永假式）：各种赋值情况下均为假 可满足式：存在赋值为真（不是矛盾式） 第二章 命题逻辑等值演算 等值式 若A，B构成的A\\leftrightarrow B为重言式，则称A，B等价，记为A\\Leftrightarrow B 德摩根律 吸收律 蕴含等值式 等价等值式 范式 文字：命题变元及其否定 简单析取式：仅由有限个文字构成的析取式¬p,p∨q\\neg p,p\\vee q¬p,p∨q 简单合取式：仅由有限个文字构成的合取式¬p,p∧q\\neg p,p\\wedge q¬p,p∧q 析取范式：由有限个简单合取式的析取构成的命题式p∨q,(p∧q)∨rp\\vee q, (p\\wedge q)\\vee rp∨q,(p∧q)∨r 合取范式：由有限个简单析取式的合取构成的命题式p∧q,(p∨q)∧rp\\wedge q, (p\\vee q)\\wedge rp∧q,(p∨q)∧r 主析取范式：极小项（简单合取式，m）的析取∨\\vee∨构成的命题式 主合取范式：极大项（简单析取式，M）的合取∧\\wedge∧构成的命题式 联结词完备集 设S是一个联结词集合，如果一个命题公式都可以由仅含S中的联结词构成的公式表示，则S是一个联结词完备集。S={¬,∧,∨}S=\\{\\neg, \\wedge, \\vee\\}S={¬,∧,∨}是联结词完备集 与非联结词p↑q=¬(p∧q)p\\uparrow q=\\neg (p\\wedge q)p↑q=¬(p∧q) 或非联结词p↓q=¬(p∨q)p\\downarrow q=\\neg (p\\vee q)p↓q=¬(p∨q) 等值演算：由已知的等值式推出新的等值式。 第三章 命题逻辑的推理理论 当且仅当A→BA\\rightarrow BA→B是重言式，A⇒BA\\Rightarrow BA⇒B 谓词逻辑基本概念 个体词：指研究对象中可以独立存在的具体的或抽象的客体 谓词：刻画个体词性质及个体词之间相互关系的词 小明是大学生：其中小明为个体词，...是大学生为谓词。 量词：表示个体之间数量关系的词 全称量词：∀\\forall∀ 存在量词：∃\\exists∃ 多个量词出现时不能随意切换 谓词逻辑公式∀xA\\forall xA∀xA， xxx为指导变元，AAA为量词辖域，xxx称为约束出现，其它变项为自由出现。 谓词逻辑等值演算与推理 谓词逻辑等值式：A↔BA \\leftrightarrow BA↔B是永真式，A，B等值，记A⇔BA\\Leftrightarrow BA⇔B 量词否定等值式 量词辖域收缩与扩张等值式 量词分配等值式 谓词逻辑前束范式Q1x1Q2x2…QkxkBQ_1x_1Q_2x_2\\dots Q_kx_kBQ1​x1​Q2​x2​…Qk​xk​B，其中QiQ_iQi​ 为∀\\forall∀ 或∃\\exists∃，B为不含量词的公式 任何公式都存在等值的前束范式 谓词逻辑的推理理论 集合代数 集合：一些事物组成的整体。 这些事物就是集合的元素或成员，属于∈\\in∈，不属于∉\\notin∈/​。 子集⊆\\subseteq⊆，真子集⊂\\subset⊂ 相等=== 空集是一切集合的子集∅\\emptyset∅ n元子集：含有m个元素的子集 幂集：全体子集构成的集合，记作P(A)P(A)P(A)，n元集的幂集有2n2^n2n个元素 全集E：其余集合都是它的子集 集合运算：交并差，对称差（异或），绝对补集 集合恒等式 二元关系 有序对（序偶）：x，y按照一定顺序组成的二元组，记作&lt;x,y&gt;&lt;x,y&gt;&lt;x,y&gt; 笛卡尔积：A×B={&lt;x,y&gt;∣x∈A∧y∈B}A\\times B=\\{&lt;x,y&gt;\\vert x\\in A\\wedge y\\in B\\}A×B={&lt;x,y&gt;∣x∈A∧y∈B} 笛卡尔积不满足交换律、结合律，满足分配律 二元关系：A×BA \\times BA×B的一个子集R称为从A到B的一个二元关系。如果(a,b)∈R(a,b)\\in R(a,b)∈R，则称a与b符合关系R，记为aRbaRbaRb。 特殊关系：空关系、全域关系EAE_AEA​、恒等关系IAI_AIA​ 表示关系方法：集合表达式、关系矩阵和关系图。 关系运算 定义域：R中所有有序对的第一元素构成的集合，记作domRdomRdomR 值域：第二元素构成的集合，记作ranRranRranR 域：定义域和值域的并集，记作fldRfldRfldR 逆：R−1={&lt;y,x&gt;∣&lt;x,y&gt;∈R}R^{-1}=\\{&lt;y,x&gt; \\vert &lt;x,y&gt; \\in R\\}R−1={&lt;y,x&gt;∣&lt;x,y&gt;∈R} 右复合：F∘GF\\circ GF∘G，类似连接运算 关系性质 自反：∀x∈A,xRx\\forall x \\in A,xRx∀x∈A,xRx，则称R为自反的。 反自反：∀x∈A,(x,x)∉R\\forall x \\in A, (x,x) \\notin R∀x∈A,(x,x)∈/​R，则R为反自反。 反自反的必定不是自反，不是自反的未必是反自反 对称：∀x,y∈X,xRy→yRx\\forall x,y \\in X, xRy \\rightarrow yRx∀x,y∈X,xRy→yRx，则称R是对称的。 反对称：∀x,y∈X,xRy∧yRx→x=y\\forall x,y \\in X, xRy \\wedge yRx \\rightarrow x=y∀x,y∈X,xRy∧yRx→x=y，则R是反对称的 恒等关系是对成的，也是反对称的。 传递：∀x,y∈X,xRy∧yRz→xRz\\forall x,y \\in X, xRy \\wedge yRz \\rightarrow xRz∀x,y∈X,xRy∧yRz→xRz，则称R是传递的。 闭包 自反闭包r(R)r(R)r(R)，对称闭包s(R)s(R)s(R)，传递闭包t(R)t(R)t(R) 相容关系：如果R是自反的且对称的，那么R为相容关系。 等价关系≅\\cong≅：二元关系满足自反、对称、传递 等价类：[x]R={y∣y∈A∧xRy}[x]_R=\\{y\\vert y\\in A \\wedge xRy\\}[x]R​={y∣y∈A∧xRy} 商集：以R的所有等价类作为元素的集合，记作A/RA/RA/R 划分 偏序关系：二元关系R满足自反、反对称、传递，记作⪯\\preceq⪯ 偏序集：&lt;A,⪯&gt;&lt;A,\\preceq&gt;&lt;A,⪯&gt; 最大元，最小元 极大元，极小元 上界，上确界，下界，下确界 函数 函数定义：y=F(x)y=F(x)y=F(x)。集合A，B，A到B的函数记作f:A→Bf:A\\rightarrow Bf:A→B 部分映射：f:A→Y,A⊆Xf:A \\rightarrow Y, A\\subseteq Xf:A→Y,A⊆X，则f是X上一个部分映射。 单射：设f:X→Y,∀x,x′∈X,if x≠x′,then f(x)≠f(x′)f:X\\rightarrow Y, \\forall x, x&#x27; \\in X,if \\space x \\neq x&#x27;,then \\space f(x) \\neq f(x&#x27;)f:X→Y,∀x,x′∈X,if x​=x′,then f(x)​=f(x′)，则称f为X到Y的单射。即自变量不同，函数值也不同。 满射：设f:X→Y,∀y∈Y,∃x∈X,make f(x)=yf:X\\rightarrow Y,\\forall y \\in Y, \\exists x \\in X, make \\space f(x)=yf:X→Y,∀y∈Y,∃x∈X,make f(x)=y，则f为X到Y的满射。即对每个函数值，都能找到因变量与之对应。 双射：f即是单射又是满射，即一一对应。 恒等映射：设f:X→X,∀x∈X,f(x)=xf:X \\rightarrow X, \\forall x \\in X, f(x)=xf:X→X,∀x∈X,f(x)=x，则f为X上的恒等映射，IXI_XIX​ 函数的复合：F∘GF\\circ GF∘G 反函数：f−1:B→Af^{-1}:B\\rightarrow Af−1:B→A 代数结构","categories":[{"name":"学习","slug":"学习","permalink":"https://blog.xiaoji.icu/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"计算机考研","slug":"学习/计算机考研","permalink":"https://blog.xiaoji.icu/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94/"},{"name":"复试","slug":"学习/计算机考研/复试","permalink":"https://blog.xiaoji.icu/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94/%E5%A4%8D%E8%AF%95/"}],"tags":[{"name":"离散数学","slug":"离散数学","permalink":"https://blog.xiaoji.icu/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"计算机考研复试","slug":"计算机考研复试","permalink":"https://blog.xiaoji.icu/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"}]},{"title":"Hello World!","slug":"hello-world","date":"2022-03-14T08:13:00.000Z","updated":"2022-03-16T08:13:00.000Z","comments":true,"path":"2022/03/14/hello-world/","link":"","permalink":"https://blog.xiaoji.icu/2022/03/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"article","slug":"article","permalink":"https://blog.xiaoji.icu/categories/article/"}],"tags":[{"name":"test","slug":"test","permalink":"https://blog.xiaoji.icu/tags/test/"},{"name":"first","slug":"first","permalink":"https://blog.xiaoji.icu/tags/first/"}]}],"categories":[{"name":"学习","slug":"学习","permalink":"https://blog.xiaoji.icu/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"计算机考研","slug":"学习/计算机考研","permalink":"https://blog.xiaoji.icu/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94/"},{"name":"复试","slug":"学习/计算机考研/复试","permalink":"https://blog.xiaoji.icu/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94/%E5%A4%8D%E8%AF%95/"},{"name":"article","slug":"article","permalink":"https://blog.xiaoji.icu/categories/article/"}],"tags":[{"name":"计算机考研复试","slug":"计算机考研复试","permalink":"https://blog.xiaoji.icu/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"},{"name":"C++","slug":"C","permalink":"https://blog.xiaoji.icu/tags/C/"},{"name":"离散数学","slug":"离散数学","permalink":"https://blog.xiaoji.icu/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"test","slug":"test","permalink":"https://blog.xiaoji.icu/tags/test/"},{"name":"first","slug":"first","permalink":"https://blog.xiaoji.icu/tags/first/"}]}